{"version":3,"sources":["selectUser.js","formHeader.js","textInput.js","statusForm.js","postDetail.js","postMassege.js","like.js","commentToggleButton.js","commentForm.js","likeComment.js","commentList.js","commentsBoard.js","comment.js","postReply.js","post.js","filterPost.js","postList.js","initalData.js","index.js"],"names":["SelectUser","handleChange","event","props","chnageActiveUser","target","value","className","onChange","this","selected","Component","FormHeader","TextInput","setState","handleSubmit","addPost","state","preventDefault","onSubmit","type","StatusForm","addPostData","updateParentState","chnageUser","user","currentUser","updateUser","PostDetail","data","postTime","PostMassege","text","Like","handleClick","addLike","Fragment","onClick","likes","CommentToggleButton","commentSwitch","CommentForm","textValue","addComment","placeholder","id","CommentList","likeComment","commentId","postId","renderComents","comments","sort","a","b","map","comment","CommentBoard","Comment","commentBoard","PostReply","totalLikes","Post","commentText","FilterPost","changeFilterMethod","PostList","renderByLikes","sortedArr","masseges","ele","renderByUser","renderByTime","filterMethod","renderPosts","Date","getUTCMilliseconds","App","newStateMasseges","forEach","massege","Object","assign","updateStateNewLike","newTotalLike","updateStateLikeComment","commentsArray","newLikes","updateStateNewComment","newCommentsArray","push","time","getDay","getHours","getMinutes","updateStateNewPost","newMasseges","unshift","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.755a452e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SelectUser extends Component {\r\n  handleChange = (event) => {\r\n    this.props.chnageActiveUser(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"select-user\">\r\n        <select onChange={this.handleChange}>\r\n          <option value=\"erfun\" selected>Erfun</option>\r\n          <option value=\"shola\">Shola</option>\r\n          <option value=\"dragon\">Dragon</option>\r\n          <option value=\"dolphin\">Dolphin</option>\r\n        </select> \r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SelectUser;","import React, { Component } from 'react';\r\nimport SelectUser from './selectUser'\r\n\r\nclass FormHeader extends Component {\r\n  render() {\r\n    return(\r\n      <header>\r\n        <nav className=\"nav-bar\">\r\n          <h1>Social News Feed</h1>\r\n          <SelectUser chnageActiveUser={this.props.chnageActiveUser}/>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n};\r\n\r\nexport default FormHeader;","import React, { Component } from 'react';\r\n\r\nclass TextInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    this.props.addPost(this.state.value);\r\n    event.preventDefault();\r\n    this.setState({\r\n      value: '',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form onSubmit={this.handleSubmit} className=\"status-form\">\r\n        <input type=\"text\" onChange={this.handleChange} value={this.state.value}></input>\r\n        <button>Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default TextInput;","import React, { Component } from 'react';\r\nimport FormHeader from './formHeader';\r\nimport TextInput from './textInput';\r\n\r\nclass StatusForm extends Component {\r\n  addPostData = (value) => {\r\n    this.props.updateParentState(value)\r\n  }\r\n\r\n  chnageUser = (user) => {\r\n    this.setState({\r\n      currentUser: user\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"form\">\r\n        <FormHeader updateUser={this.chnageUser} chnageActiveUser={this.props.chnageActiveUser}/>\r\n        <TextInput addPost={this.addPostData}/>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default StatusForm;","import React, { Component } from 'react';\r\n\r\nclass PostDetail extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <img className=\"avatar\"></img>\r\n        <p>\r\n          <strong>\r\n            {this.props.data.user}\r\n          </strong>\r\n        </p>\r\n        <p>\r\n          {this.props.data.postTime}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default PostDetail;","import React, { Component } from 'react';\r\n\r\nfunction PostMassege(props) {\r\n  return(\r\n    <p className=\"post-massege\">\r\n      {props.text}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default PostMassege;","import React, { Component } from 'react';\r\n\r\nclass Like extends Component {\r\n  handleClick  = (event) => {\r\n    event.preventDefault();\r\n    this.props.addLike()\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={this.handleClick}>\r\n          Like\r\n        </button>\r\n        <span>\r\n          {this.props.likes}\r\n        </span>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Like;","import React, { Component } from 'react';\r\n\r\nclass CommentToggleButton extends Component {\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n    this.props.commentSwitch();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <button className=\"toggle\" onClick={this.handleClick}>\r\n        {this.props.value}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CommentToggleButton;","import React, { Component } from 'react';\r\n\r\nclass CommentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      textValue: '',\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({textValue: event.target.value});\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.addComment(this.state.textValue)\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form className=\"comment-form\">\r\n        <input type=\"text\" placeholder=\"write Comment\" value={this.state.textValue} onChange={this.handleChange}></input>\r\n        <button className=\"submit-comment\" onClick={this.handleSubmit}>upload</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CommentForm;","import React, { Component } from 'react';\r\n\r\nclass Like extends Component {\r\n  handleClick  = (event) => {\r\n    event.preventDefault();\r\n    this.props.addLike(this.props.id)\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={this.handleClick}>\r\n          Like\r\n        </button>\r\n        <span>\r\n          {this.props.likes}\r\n        </span>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Like;","import React, { Component } from 'react';\r\nimport Like from './likeComment';\r\n\r\nclass CommentList extends Component {\r\n  likeComment = (commentId) => {\r\n    this.props.likeComment(this.props.postId, commentId)\r\n  }\r\n\r\n  renderComents = () => {\r\n    let sortedArray = this.props.comments.sort(\r\n      (a, b) => {\r\n        return (b.likes - a.likes);\r\n      }\r\n    );\r\n    \r\n    return sortedArray.map(\r\n      comment => {\r\n        return(\r\n          <div className=\"comment\">\r\n            <p>\r\n              posted by: {comment.user}\r\n            </p>\r\n            {comment.text}\r\n            <div>\r\n              <Like likes={comment.likes} addLike={this.likeComment} id={comment.id}/>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"comment-list\">\r\n        {this.renderComents()}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CommentList;","import React, { Component } from 'react';\r\nimport CommentForm from './commentForm';\r\nimport CommentList from './commentList';\r\n\r\nclass CommentBoard extends Component {\r\n  render() {\r\n    return(\r\n      <div className=\"comment-board\">\r\n        <CommentList comments={this.props.comments} likeComment={this.props.likeComment} postId={this.props.postId}/>\r\n        <CommentForm addComment={this.props.addComment}/>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CommentBoard;","import React from 'react';\r\nimport CommentToggleButton from './commentToggleButton';\r\nimport CommentBoard from './commentsBoard';\r\n\r\nfunction Comment(props) {\r\n  if(props.commentBoard) {\r\n     return(\r\n      <div className='comment'>\r\n        <CommentToggleButton value='hide' commentSwitch={props.commentSwitch}/>\r\n        <CommentBoard addComment={props.addComment} comments={props.comments} likeComment={props.likeComment} postId={props.id}/>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return(\r\n    <div className=\"comment\">\r\n      <CommentToggleButton value='comment' commentSwitch={props.commentSwitch}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;","import React, { Component } from 'react';\r\nimport Like from './like';\r\nimport Comment from './comment';\r\n\r\nclass PostReply extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Like likes={this.props.data.totalLikes} addLike={this.props.addLike} id={this.props.data.id}/>\r\n        <Comment commentBoard={this.props.data.commentBoard} comments={this.props.data.comments} commentSwitch={this.props.commentSwitch} addComment={this.props.addComment} likeComment={this.props.likeComment}\r\n        id={this.props.data.id}/>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default PostReply;","import React, { Component } from 'react';\r\nimport PostDetail from './postDetail';\r\nimport PostMassege from './postMassege';\r\nimport PostReply from './postReply';\r\n\r\nclass Post extends Component {\r\n  addLike = () => {\r\n    this.props.addLike(this.props.data.id);\r\n  }\r\n\r\n  commentSwitch = () => {\r\n    this.props.commentSwitch(this.props.data.id);\r\n  }\r\n\r\n  addComment = (commentText) => {\r\n    this.props.addComment(this.props.data.id, commentText)\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"post\">\r\n        <PostDetail data={this.props.data}/>\r\n        <PostMassege text={this.props.data.text}/>\r\n        <PostReply data={this.props.data} addLike={this.addLike} commentSwitch={this.commentSwitch} addComment={this.addComment} likeComment={this.props.likeComment}/>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Post;","import React, { Component } from 'react';\r\n\r\nclass FilterPost extends Component {\r\n  handleChange = (event) => {\r\n    this.props.changeFilterMethod(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form>\r\n        <select onChange={this.handleChange}>\r\n          <option value=\"recent\" selected>recent</option>\r\n          <option value=\"popular\">most popular</option>\r\n          <option value=\"user\">user</option>\r\n        </select> \r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default FilterPost;","import React, { Component } from 'react';\r\nimport Post from './post';\r\nimport FilterPost from './filterPost';\r\n\r\nclass PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterMethod: 'recent',\r\n    };\r\n  }\r\n\r\n  renderByLikes = () => {\r\n    let sortedArr = [...this.props.masseges];\r\n    \r\n    sortedArr.sort(\r\n      (a, b) => {\r\n        return (b.totalLikes - a.totalLikes);\r\n      }\r\n    );\r\n\r\n    return(\r\n      sortedArr.map(\r\n        ele => {\r\n          return (\r\n            <Post data={ele} addLike={this.props.addLike} commentSwitch={this.props.commentSwitch} addComment={this.props.addComment} likeComment={this.props.likeComment}/>\r\n          );\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  renderByUser = () => {\r\n    return(\r\n      this.props.masseges.map(\r\n        ele => {\r\n          if (ele.user === this.props.currentUser) {\r\n            return (\r\n              <Post data={ele} addLike={this.props.addLike} commentSwitch={this.props.commentSwitch} addComment={this.props.addComment} likeComment={this.props.likeComment}/>\r\n            );\r\n          };\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  renderByTime = () => {\r\n    return(\r\n      this.props.masseges.map(\r\n        ele => {\r\n          return (\r\n            <Post data={ele} addLike={this.props.addLike} commentSwitch={this.props.commentSwitch} addComment={this.props.addComment} likeComment={this.props.likeComment}/>\r\n          );\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  changeFilterMethod = (type) => {\r\n    this.setState(\r\n      {\r\n        filterMethod: type,\r\n      }\r\n    );\r\n  }\r\n\r\n  renderPosts = () => {\r\n    if (this.state.filterMethod === 'recent') {\r\n      return this.renderByTime();\r\n    } else if (this.state.filterMethod === 'popular') {\r\n      return this.renderByLikes();\r\n    } else {\r\n      return this.renderByUser();\r\n    };    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"timeLine\">\r\n        <FilterPost changeFilterMethod={this.changeFilterMethod}/>\r\n        {this.renderPosts()}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default PostList;","const data = [\r\n  {\r\n    user: 'erfun',\r\n    text: 'Hello every one',\r\n    totalLikes: 5,\r\n    id: 11,\r\n    postTime: 'yesterday',\r\n    comments: [\r\n      {\r\n        text: 'hello to you too',\r\n        user: 'dolphin',\r\n        likes: 2,\r\n        id: 111,\r\n      },\r\n      {\r\n        text: 'whats upppppp braa',\r\n        user: 'shola',\r\n        likes: 0,\r\n        id: 1112,\r\n      },\r\n      {\r\n        text: 'HA HA HA HAAAAA',\r\n        user: 'dragon',\r\n        likes: 40,\r\n        id: 11346512,\r\n      }\r\n    ],\r\n    commentBoard: false,\r\n  },\r\n  {\r\n    user: 'dragon',\r\n    text: 'Hello every one today is a great day',\r\n    totalLikes: 30,\r\n    id: 22,\r\n    postTime: 'yesterday',\r\n    comments: [\r\n      {\r\n        text: 'whats so good about it?',\r\n        user: 'dolphin',\r\n        likes: 2,\r\n        id: 2253432,\r\n      },\r\n      {\r\n        text: 'glad tpo see you happy',\r\n        user: 'shola',\r\n        likes: 0,\r\n        id: 22342423,\r\n      },\r\n      {\r\n        text: 'HA HA HA HAAAAA',\r\n        user: 'erfun',\r\n        likes: 40,\r\n        id: 33453234333,\r\n      }\r\n    ],\r\n    commentBoard: false,\r\n  },\r\n  {\r\n    user: 'shola',\r\n    text: 'Sholaaaaaa is here',\r\n    totalLikes: 30,\r\n    id: new Date().getUTCMilliseconds(),\r\n    postTime: 'yesterday',\r\n    comments: [\r\n      {\r\n        text: 'God damn it',\r\n        user: 'dolphin',\r\n        likes: 2,\r\n        id: 33242345343,\r\n      },\r\n      {\r\n        text: 'yaaaaaaay',\r\n        user: 'zach',\r\n        likes: 0,\r\n        id: 3345345234344,\r\n      },\r\n      {\r\n        text: 'HA HA HA HAAAAA',\r\n        user: 'erfun',\r\n        likes: 40,\r\n        id: 345779785645434536,\r\n      }\r\n    ],\r\n    commentBoard: false,\r\n  },\r\n  {\r\n    user: 'erfun',\r\n    text: 'Lets paaartyyyy',\r\n    totalLikes: 30,\r\n    id: 124645453455,\r\n    postTime: 'yesterday',\r\n    comments: [\r\n      {\r\n        text: ';-)',\r\n        user: 'dolphin',\r\n        likes: 2,\r\n        id: 98845345234765,\r\n      },\r\n      {\r\n        text: 'glad tpo see you happy',\r\n        user: 'shola',\r\n        likes: 0,\r\n        id: 3653657865465475,\r\n      },\r\n      {\r\n        text: 'HA HA HA HAAAAA',\r\n        user: 'dragon',\r\n        likes: 40,\r\n        id: 324567853324934574,\r\n      }\r\n    ],\r\n    commentBoard: false,\r\n  },\r\n  {\r\n    user: 'dragon',\r\n    text: 'last day of front end',\r\n    totalLikes: 30,\r\n    id: 4328756732345,\r\n    postTime: 'yesterday',\r\n    comments: [\r\n      {\r\n        text: 'it seems like yesterday that we just started the course',\r\n        user: 'dolphin',\r\n        likes: 2,\r\n        id: 8675645342452,\r\n      },\r\n      {\r\n        text: 'glad tpo see you happy',\r\n        user: 'shola',\r\n        likes: 0,\r\n        id: 2347589765432345423452,\r\n      },\r\n      {\r\n        text: 'HA HA HA HAAAAA',\r\n        user: 'erfun',\r\n        likes: 40,\r\n        id: 245689114524345,\r\n      }\r\n    ],\r\n    commentBoard: false,\r\n  },\r\n];\r\n\r\nexport default data;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport StatusForm from './statusForm';\r\nimport PostList from './postList';\r\nimport data from './initalData';\r\nimport './style.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentUser: 'erfun',\r\n      masseges: data,\r\n    };\r\n  }\r\n\r\n  commentSwitch = (postId) => {\r\n    let newStateMasseges = [...this.state.masseges];\r\n    \r\n    newStateMasseges.forEach(\r\n      (massege) => {\r\n        if (massege.id === postId) {\r\n          if (massege.commentBoard) {\r\n            return Object.assign(massege, {commentBoard: false});\r\n          }\r\n\r\n          return Object.assign(massege, {commentBoard: true});\r\n        };\r\n      }\r\n    );\r\n\r\n    this.setState({masseges: newStateMasseges});\r\n  }\r\n\r\n  chnageActiveUser = (user) => {\r\n    this.setState({\r\n      currentUser: user\r\n    });\r\n  };\r\n\r\n  updateStateNewLike = (postId) => {\r\n    let newStateMasseges = [...this.state.masseges];\r\n    \r\n    newStateMasseges.forEach(\r\n      (massege) => {\r\n        if (massege.id === postId) {\r\n          let newTotalLike = (massege.totalLikes + 1);\r\n\r\n          return Object.assign(massege, {totalLikes: newTotalLike});\r\n        };\r\n      }\r\n    );\r\n\r\n    this.setState({masseges: newStateMasseges});\r\n  }\r\n\r\n  updateStateLikeComment = (postId, commentId) => {\r\n    let newStateMasseges = [...this.state.masseges];\r\n\r\n    newStateMasseges.forEach(\r\n      (massege) => {\r\n        if (massege.id === postId) {\r\n          let commentsArray = [...massege.comments];\r\n          \r\n          commentsArray.forEach(\r\n            comment => {\r\n              if (comment.id === commentId) {\r\n                let newLikes = (comment.likes + 1);\r\n\r\n                return Object.assign(comment, {likes: newLikes});\r\n              }\r\n            }\r\n          )\r\n\r\n          return Object.assign(massege, {comments: commentsArray});\r\n        };\r\n      }\r\n    );\r\n\r\n    this.setState({masseges: newStateMasseges});\r\n  }\r\n\r\n  updateStateNewComment = (postId, commentText) => {\r\n    let newStateMasseges = [...this.state.masseges];\r\n    \r\n    newStateMasseges.forEach(\r\n      (massege) => {\r\n        if (massege.id === postId) {\r\n          let newCommentsArray = [...massege.comments];\r\n\r\n          newCommentsArray.push(\r\n            {\r\n              text: commentText,\r\n              user: this.state.currentUser,\r\n              likes: 0,\r\n              id: new Date().getUTCMilliseconds(),\r\n            }\r\n          )\r\n\r\n          return Object.assign(massege, {comments: newCommentsArray});\r\n        };\r\n      }\r\n    );\r\n\r\n    this.setState({masseges: newStateMasseges});\r\n  }\r\n\r\n  postTime = () => {\r\n    const time = new Date();\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    return(\r\n      `${days[time.getDay()]} ${time.getHours()}:${time.getMinutes()}`\r\n    );\r\n  }\r\n\r\n  updateStateNewPost = (massege) => {\r\n    const newMasseges = [...this.state.masseges];\r\n\r\n    newMasseges.unshift(\r\n      {\r\n        user: this.state.currentUser,\r\n        text: massege,\r\n        totalLikes: 0,\r\n        id: new Date().getUTCMilliseconds(),\r\n        postTime: this.postTime(),\r\n        comments: [],\r\n        commentBoard: false,\r\n      }\r\n    );\r\n\r\n    this.setState({\r\n      masseges: newMasseges,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <StatusForm updateParentState={this.updateStateNewPost} chnageActiveUser={this.chnageActiveUser}/>\r\n        <PostList masseges={this.state.masseges} addLike={this.updateStateNewLike} commentSwitch={this.commentSwitch} addComment={this.updateStateNewComment} likeComment={this.updateStateLikeComment}\r\n        currentUser={this.state.currentUser}/>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}